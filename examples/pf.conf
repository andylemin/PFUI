#	$OpenBSD: pf.conf - PFUI_Firewall Example
#   https://man.openbsd.org/pf.conf

set skip on lo

## Static Tables
table <rfc1918> const { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 }
table <NonRoutable> const { 0.0.0.0/8, 127.0.0.0/8, 169.254.0.0/16, 240.0.0.0/4, 255.255.255.255/32 }

table <PFUI_Unbound> const {  <list of internal Unbound DNS servers running PFUI_Unbound>  }
table <PermitList> const {  <list of business services which must always work>  }  # E.g. VoIP, SaaS etc

## Dynamic Tables
table <pfui_ipv4_domains> persist file "/var/spool/pfui_ipv4_domains"  # Managed by PFUI_Firewall
table <pfui_ipv6_domains> persist file "/var/spool/pfui_ipv6_domains"  # Managed by PFUI_Firewall

# If you are using pf-badhost for IP reputation lists (recomended)
table <pfbadhost> persist file "/etc/pf-badhost.txt"
block return in quick from any to { <pfbadhost> }
block return in quick from { <pfbadhost> } to any

# PFUI Blocking mode (BLOCKING: True); (default/recommended); PFUI_Unbound blocks forwarding DNS RRs to internal clients until PF tables are updated.
# The total time for; 'RR-Response-->PFUI_Unbound--(IP+TTL data)->PFUI_Firewall(install to PF)--(ACK)->PFUI_Unbound-->Send-RR-to-client'
# on moderate i5 hardware and 1GbE network (less than 1ms between PFUI_Unbound and PFUI_Firewall), is approximately 3ms (3300-4200 microseconds).
# Using Xeon CPUs on DNS servers and PF Firewalls with 10GbE network, PFUI's latency is below 1ms (~700ns in lab).
# Enable PFUI logging (in yml files) for debugging PFUI performance in your network, however beware increasing logging levels, as logging impacts latency greatly.
# PFUI Non-Blocking mode (BLOCKING: False); EXPERIMENTAL - requires 'all no state' in pf.conf for denied traffic from the clients, as Clients might connect to an IP before PFUI Tables are updated.

block drop log on egress all  # Silent drop on outside interface

# PFUI in Blocking mode
block return log on !egress all  # Let internal initiators know they were denied

# PFUI in Non-Blocking mode (client gets response at same time as firewall)
# block return log on !egress all no state  # Let internal initiators know they were denied, do not keep state
# 'deny states' for denied traffic - PFUI might be catching up (non-blocking) or user may have tried to access by
# IP directly, and we want their subsequent attempts (using DNS properly) to work immediately

# Allow only Corporate PFUI_Unbound servers to perform DNS lookups and update PFUI_Firewall
pass quick proto { tcp, udp } from <PFUI_Unbound> to any port { 53, 443, 853 }  # DNS, DoH, DoT

# Allow PFUI updates from PFUI_Unbound to PFUI_Firewall for updating PF tables
pass in quick on !egress proto { udp, tcp } from <PFUI_Unbound> to self port { 10001 }

# Allow outbound user traffic only to IP addresses in PFUI PF Tables (successfully resolved by PFUI DNS with DNS-BL etc)
pass out quick on egress to <pfui_ipv4_domains>
pass out quick on egress to <pfui_ipv6_domains>

# Allow users/servers access to coorporate services which do no use DNS domains - (VoIP, SaaS etc)
pass out quick on egress to <PermitList>


# Common example rules
# Block traffic from/to non-public non-routable address space on outside interface
block in quick on egress from <NonRoutable>
block out quick on egress to <NonRoutable>
# Allow firewall self traffic out
pass out quick proto { tcp, udp } from self to port { 53, 443, 853 } user _unbound  # Local PFUI_Unbound DNS daemon
pass out quick proto { tcp, udp } from self to port { 123 } user _ntp   # Local NTPD
pass out quick proto udp from self to 255.255.255.255 port { 67, 547 }  # DHCPClient
# Allow firewall self traffic in
pass in quick on !egress inet proto icmp from <rfc1918> to self
pass in quick on !egress inet proto tcp from <rfc1918> to self port 22

